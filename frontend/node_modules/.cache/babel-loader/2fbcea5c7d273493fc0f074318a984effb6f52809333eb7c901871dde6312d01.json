{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\GenAI\\\\frontend\\\\src\\\\Components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  chatId\n}) {\n  _s();\n  const id = chatId;\n  const token = localStorage.getItem(\"token\");\n  const fetchMessages = async () => {\n    const response = await fetch(`${process.env.REACT_APP_SERVER_ENDPOINT}/api/getMessages`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        chatId: id\n      })\n    });\n    const data = await response.json();\n    console.log(data);\n  };\n  useEffect(() => {\n    fetchMessages();\n  }, [id]);\n\n  //   console.log(id);\n  //   function formatFirebaseSetupGuide(input) {\n  //     // Replace specific markdown-like patterns with HTML tags\n  //     let formattedText = input\n  //       .replace(/^##\\s(.+)$/gm, \"<h2>$1</h2>\") // Convert ## headers to <h2>\n  //       .replace(/^###\\s(.+)$/gm, \"<h3>$1</h3>\") // Convert ### headers to <h3>\n  //       .replace(/^\\*\\*\\s(.+):\\s*\\*\\*/gm, \"<strong>$1:</strong>\") // Convert **Text:** to <strong>Text:</strong>\n  //       .replace(/^\\* (.+)$/gm, \"<li>$1</li>\") // Convert * items to <li>\n  //       .replace(\n  //         /^```(javascript)?$/gm,\n  //         '<pre><code class=\"language-javascript\">'\n  //       ) // Convert ```javascript to <pre><code>\n  //       .replace(/^```$/gm, \"</code></pre>\") // Convert ``` to </code></pre>\n  //       .replace(\n  //         /\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g,\n  //         '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n  //       ) // Convert [text](url) to <a href=\"url\">text</a>\n  //       .replace(/\\n\\n/g, \"</p><p>\") // Convert double newlines to paragraph breaks\n  //       .replace(/\\n/g, \"<br/>\"); // Convert single newlines to <br/>\n\n  //     // Wrap the entire text in a <div>\n  //     formattedText = `<div>${formattedText}</div>`;\n\n  //     // Return the formatted HTML\n  //     return formattedText;\n  //   }\n\n  //   console.log(formatFirebaseSetupGuide(text));\n  //   const formattedHTML = formatFirebaseSetupGuide(text);\n\n  //   return <div dangerouslySetInnerHTML={{ __html: formattedHTML }} />;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","Chat","chatId","_s","id","token","localStorage","getItem","fetchMessages","response","fetch","process","env","REACT_APP_SERVER_ENDPOINT","method","headers","Authorization","body","JSON","stringify","data","json","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/GenAI/frontend/src/Components/Chat.js"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nfunction Chat({ chatId }) {\r\n  const id = chatId;\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const fetchMessages = async () => {\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_SERVER_ENDPOINT}/api/getMessages`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ chatId: id }),\r\n      }\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n  }, [id]);\r\n\r\n  //   console.log(id);\r\n  //   function formatFirebaseSetupGuide(input) {\r\n  //     // Replace specific markdown-like patterns with HTML tags\r\n  //     let formattedText = input\r\n  //       .replace(/^##\\s(.+)$/gm, \"<h2>$1</h2>\") // Convert ## headers to <h2>\r\n  //       .replace(/^###\\s(.+)$/gm, \"<h3>$1</h3>\") // Convert ### headers to <h3>\r\n  //       .replace(/^\\*\\*\\s(.+):\\s*\\*\\*/gm, \"<strong>$1:</strong>\") // Convert **Text:** to <strong>Text:</strong>\r\n  //       .replace(/^\\* (.+)$/gm, \"<li>$1</li>\") // Convert * items to <li>\r\n  //       .replace(\r\n  //         /^```(javascript)?$/gm,\r\n  //         '<pre><code class=\"language-javascript\">'\r\n  //       ) // Convert ```javascript to <pre><code>\r\n  //       .replace(/^```$/gm, \"</code></pre>\") // Convert ``` to </code></pre>\r\n  //       .replace(\r\n  //         /\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g,\r\n  //         '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\r\n  //       ) // Convert [text](url) to <a href=\"url\">text</a>\r\n  //       .replace(/\\n\\n/g, \"</p><p>\") // Convert double newlines to paragraph breaks\r\n  //       .replace(/\\n/g, \"<br/>\"); // Convert single newlines to <br/>\r\n\r\n  //     // Wrap the entire text in a <div>\r\n  //     formattedText = `<div>${formattedText}</div>`;\r\n\r\n  //     // Return the formatted HTML\r\n  //     return formattedText;\r\n  //   }\r\n\r\n  //   console.log(formatFirebaseSetupGuide(text));\r\n  //   const formattedHTML = formatFirebaseSetupGuide(text);\r\n\r\n  //   return <div dangerouslySetInnerHTML={{ __html: formattedHTML }} />;\r\n\r\n  return (\r\n    <div className=\"flex-1\">\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,IAAIA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACxB,MAAMC,EAAE,GAAGF,MAAM;EAEjB,MAAMG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,kBAAkB,EAC1D;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUX,KAAK;MAChC,CAAC;MACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEjB,MAAM,EAAEE;MAAG,CAAC;IACrC,CACF,CAAC;IACD,MAAMgB,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACnB,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACdU,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC;;EAER;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA,oBACEJ,OAAA;IAAKwB,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACrBzB,OAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC,eACX7B,OAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV;AAAC1B,EAAA,CA/DQF,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAiEb,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
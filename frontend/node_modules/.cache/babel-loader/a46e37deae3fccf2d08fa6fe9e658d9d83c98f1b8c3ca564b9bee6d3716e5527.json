{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\GenAI\\\\frontend\\\\src\\\\Components\\\\UsersChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport ChatRow from \"./ChatRow\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UsersChat() {\n  _s();\n  const [chats, setChats] = React.useState([]);\n  const fetchChats = async () => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_SERVER_ENDPOINT}/usersChat`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const data = await res.json();\n      console.log(data.chats);\n      if (res.status === 200) {\n        setChats(data.chats);\n      }\n    } catch (error) {\n      console.log(error);\n      toast.error(\"Something went wrong\");\n    }\n  };\n  useEffect(() => {\n    fetchChats();\n  }, []);\n  const formatDate = isoDateTime => {\n    const date = new Date(isoDateTime);\n\n    // Options for formatting the date\n    const dateOptions = {\n      day: \"2-digit\",\n      month: \"long\",\n      year: \"numeric\"\n    };\n\n    // Options for formatting the time\n    const timeOptions = {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false,\n      // For 24-hour format\n      timeZone: \"UTC\" // Adjust the time zone if needed\n    };\n\n    // Convert to human-readable format\n    const humanReadableDate = date.toLocaleDateString(\"en-IN\", dateOptions);\n    const humanReadableTime = date.toLocaleTimeString(\"en-IN\", timeOptions);\n    return {\n      date: humanReadableDate,\n      time: humanReadableTime\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full bg-stone-100 h-96 overflow-y-auto rounded-lg mt-3\",\n    children: chats.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).map(chat => /*#__PURE__*/_jsxDEV(ChatRow, {\n      email: chat.email,\n      time: formatDate(chat.createdAt),\n      chatId: chat._id\n    }, chat._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(UsersChat, \"vytB8QcpLWFeZXbb4G/4rqAt8MY=\");\n_c = UsersChat;\nexport default UsersChat;\nvar _c;\n$RefreshReg$(_c, \"UsersChat\");","map":{"version":3,"names":["React","useEffect","ChatRow","toast","jsxDEV","_jsxDEV","UsersChat","_s","chats","setChats","useState","fetchChats","res","fetch","process","env","REACT_APP_SERVER_ENDPOINT","method","headers","Authorization","localStorage","getItem","data","json","console","log","status","error","formatDate","isoDateTime","date","Date","dateOptions","day","month","year","timeOptions","hour","minute","hour12","timeZone","humanReadableDate","toLocaleDateString","humanReadableTime","toLocaleTimeString","time","className","children","sort","a","b","createdAt","map","chat","email","chatId","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/GenAI/frontend/src/Components/UsersChat.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport ChatRow from \"./ChatRow\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction UsersChat() {\r\n  const [chats, setChats] = React.useState([]);\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const res = await fetch(\r\n        `${process.env.REACT_APP_SERVER_ENDPOINT}/usersChat`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      );\r\n      const data = await res.json();\r\n      console.log(data.chats);\r\n      if (res.status === 200) {\r\n        setChats(data.chats);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchChats();\r\n  }, []);\r\n\r\n  const formatDate = (isoDateTime) => {\r\n    const date = new Date(isoDateTime);\r\n\r\n    // Options for formatting the date\r\n    const dateOptions = {\r\n      day: \"2-digit\",\r\n      month: \"long\",\r\n      year: \"numeric\",\r\n    };\r\n\r\n    // Options for formatting the time\r\n    const timeOptions = {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      hour12: false, // For 24-hour format\r\n      timeZone: \"UTC\", // Adjust the time zone if needed\r\n    };\r\n\r\n    // Convert to human-readable format\r\n    const humanReadableDate = date.toLocaleDateString(\"en-IN\", dateOptions);\r\n    const humanReadableTime = date.toLocaleTimeString(\"en-IN\", timeOptions);\r\n\r\n    return {\r\n      date: humanReadableDate,\r\n      time: humanReadableTime,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full bg-stone-100 h-96 overflow-y-auto rounded-lg mt-3\">\r\n      {chats\r\n        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n        .map((chat) => (\r\n          <ChatRow\r\n            key={chat._id}\r\n            email={chat.email}\r\n            time={formatDate(chat.createdAt)}\r\n            chatId={chat._id}\r\n          />\r\n        ))}\r\n      {/* <ChatRow />\r\n      <ChatRow />\r\n      <ChatRow />\r\n      <ChatRow /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UsersChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}